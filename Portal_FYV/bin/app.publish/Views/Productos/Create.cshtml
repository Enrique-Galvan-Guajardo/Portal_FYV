@model Tuple<Portal_FYV.Models.Producto, SelectList, SelectList>

@{
    ViewBag.Title = "Create";
    int idProv = Convert.ToInt32(Session["Id_Usuario"]);
    // Obtener la fecha actual
    DateTime fechaActual = DateTime.Now;
    // Formatear la fecha en el formato dd-MM-yy
    string fechaFormateada = fechaActual.ToString("yyyy-MM-dd");
    string rol = Session["Rol"] != null ? Session["Rol"].ToString() : "Proveedores";
}

<div class="bg-white">
    <h2>Crear registro de productos</h2>

    @using (Html.BeginForm("Create", "Productos", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Item1.Id_Proveedor, new { Value = idProv, Name = "Id_Proveedor" })

            <div class="row mx-0 mb-5">
                <div class="col-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Nombre, "Nombre:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Nombre, new { htmlAttributes = new { @class = "form-control", Name = "Nombre" } })
                            @Html.ValidationMessageFor(model => model.Item1.Nombre, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Descripcion, "Descripción:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <!--Html.EditorFor(model => model.Item1.Descripcion, new { htmlAttributes = new { class = "form-control" } })-->
                            @Html.DropDownListFor(model => Model.Item1.Descripcion, Model.Item2, new { @class = "form-control", Name = "Descripcion" })
                            @Html.ValidationMessageFor(model => model.Item1.Descripcion, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Clave_externa, "Clave externa:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Clave_externa, new { htmlAttributes = new { @class = "form-control", Name = "Clave_externa" } })
                            @Html.ValidationMessageFor(model => model.Item1.Clave_externa, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Clave_interna, "Clave interna:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Clave_interna, new { htmlAttributes = new { @class = "form-control", Name = "Clave_interna" } })
                            @Html.ValidationMessageFor(model => model.Item1.Clave_interna, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Codigo_barras, "Código de barras:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Codigo_barras, new { htmlAttributes = new { @class = "form-control", Name = "Codigo_barras" } })
                            @Html.ValidationMessageFor(model => model.Item1.Codigo_barras, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group d-none">
                        @Html.LabelFor(model => model.Item1.Imagen_ruta, "Ruta de imagen:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Imagen_ruta, new { htmlAttributes = new { @class = "form-control", Name = "Imagen_ruta" } })
                            @Html.ValidationMessageFor(model => model.Item1.Imagen_ruta, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Embalaje, "Tipo de embalaje:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => Model.Item1.Descripcion, Model.Item3, new { @class = "form-control", Name = "Embalaje" })
                            <!--Html.EditorFor(model => model.Item1.Embalaje, new { htmlAttributes = new { class = "form-control" } })-->
                            @Html.ValidationMessageFor(model => model.Item1.Embalaje, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Unidad, "Unidad: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Unidad, new { htmlAttributes = new { @class = "form-control", Name = "Unidad" } })
                            @Html.ValidationMessageFor(model => model.Item1.Unidad, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Item1.Stock, "Stock: ", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Stock, new { htmlAttributes = new { @class = "form-control", Name = "Stock" } })
                            @Html.ValidationMessageFor(model => model.Item1.Stock, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group @( rol == "Proveedores" ? "d-none" : "")">
                        @Html.LabelFor(model => model.Item1.Fecha_Creacion, "Fecha de creación:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Fecha_Creacion, new { htmlAttributes = new { @class = "form-control", @type = "date", Name = "Fecha_Creacion", Value = fechaFormateada } })
                            @Html.ValidationMessageFor(model => model.Item1.Fecha_Creacion, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group @( rol == "Proveedores" ? "d-none" : "")">
                        @Html.LabelFor(model => model.Item1.Fecha_Modificacion, "Fecha de modificación:", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Item1.Fecha_Modificacion, new { htmlAttributes = new { @class = "form-control", @type = "date", Name = "Fecha_Modificacion", Value = fechaFormateada } })
                            @Html.ValidationMessageFor(model => model.Item1.Fecha_Modificacion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Guardar" class="btn btn-lg btn-success" />
                </div>
            </div>
        </div>
    }
    @{ 
        if (rol == "Admin+")
        {
            <script>
                // Al hacer clic en un botón o enviar un formulario
                $('form').submit(function(event) {
                    event.preventDefault(); // Prevenir el envío estándar del formulario

                    // Convertir los datos del formulario en un objeto
                    var formData = {};
                    $.each($(this).serializeArray(), function(index, field) {
                        // Verificar si el campo es un checkbox
                        if ($('[name="' + field.name + '"]').is(':checkbox')) {
                            formData[field.name] = $('[name="' + field.name + '"]').is(':checked');
                        } else {
                            formData[field.name] = field.value;
                        }
                    });

                    // Enviar el objeto por AJAX
                    $.ajax({
                        url: '@Url.Action("Create", "Productos")',
                        type: 'POST',
                        data: formData,
                        success: function (response) {
                            // Manejar la respuesta
                            console.log(response);
                            toastFill(response)
                        },
                        error: function(error) {
                            // Manejar errores
                            console.error('Error:', error);
                        }
                    });
                });
            </script>
        }
    }
    <div>
        @Html.ActionLink("Regresar", "Index", new { area = "" }, new { @class = "btn btn-link" })
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
